[{classname:"example",tests:[
{nr:"1",title:"Atom 1",name:"Atom_1.html",desc:"<p>qx.ui.basic.Atom is the parent class for buttons, menu entries, icons, checkboxes. While you can do,     you usually don't have to instantiate qx.ui.basic.Atom directly.</p>"},
{nr:"2",title:"Atom 2",name:"Atom_2.html",desc:"<p>Some more complex tests for qx.ui.basic.Atom.</p>     <p>You can change all the properties before \"really creating\" the object or any time after this was done.</p>"},
{nr:"3",title:"Atom 3",name:"Atom_3.html",desc:"<p>Testing the new flash support for qx.ui.basic.Atom</p>"},
{nr:"1",title:"ButtonView 1",name:"ButtonView_1.html",desc:"<p>qx.ui.pageview.buttonview.ButtonView implementation</p>"},
{nr:"2",title:"ButtonView 2",name:"ButtonView_2.html",desc:"<p>Yet Another qx.ui.pageview.buttonview.ButtonView Example</p>"},
{nr:"1",title:"Button 1",name:"Button_1.html",desc:"<p>Test the qx.ui.form.Button constructor. qx.ui.form.Button is based on qx.ui.basic.Atom.</p>"},
{nr:"1",title:"CheckBoxTree 1",name:"CheckBoxTree_1.html",desc:""},
{nr:"1",title:"CheckBox 1",name:"CheckBox_1.html",desc:"<p>Tests for qx.ui.form.CheckBox. qx.ui.form.CheckBox extends qx.ui.basic.Atom and so it inherits all the options and properties defined there.</p>"},
{nr:"1",title:"ColorPopup 1",name:"ColorPopup_1.html",desc:"<p>Test for qx.ui.component.ColorPopup.</p>"},
{nr:"1",title:"ColorSelector 1",name:"ColorSelector_1.html",desc:"<p>Test for qx.ui.component.ColorSelector.</p>"},
{nr:"2",title:"ColorSelector 2",name:"ColorSelector_2.html",desc:"<p>Test for qx.ui.component.ColorSelector.</p>     <p>Adding a default/previous/old color value to compare it with the new selection.</p>"},
{nr:"1",title:"ComboBoxEx 1",name:"ComboBoxEx_1.html",desc:"<p>ComboBoxEx is an enhanced version of ComboBox</p>"},
{nr:"1",title:"ComboBox 1",name:"ComboBox_1.html",desc:"<p>Testing ComboBox implementation.</p>     <p>The elements of the popup will be created on the first open of the qx.ui.form.ComboBox.</p>"},
{nr:"1",title:"Command 1",name:"Command_1.html",desc:"<p>An example showing global shortcut commands in action. The commands are linked with menu-items, but     could also be executed with the corresponding shortcut.</p>"},
{nr:"2",title:"Command 2",name:"Command_2.html",desc:"<p>An example showing global shortcut commands in action. The commands are linked with menu-items, but     could also be executed with the corresponding shortcut.</p>     <p>An objectmanager is used to disable/enable a specific command (del-Key) to make available for text-editing     in the textfield of the window. When the window is closed the command gets re-enabled.</p>"},
{nr:"1",title:"DateChooser 1",name:"DateChooser_1.html",desc:"<p>The DateChooser shows calendar and allows choosing a date.</p>"},
{nr:"1",title:"Drag 1",name:"Drag_1.html",desc:"<p>Show one way to drag a widget around the screen.</p>"},
{nr:"1",title:"Fields 1",name:"Fields_1.html",desc:"<p>Some tests for some of the most used properties of qx.ui.core.Widget (coordinates, dimensions, backgroundColor, opacity, ...).</p>     <p>Also here are the first test of some widgets which extend qx.ui.core.Widget: qx.ui.form.TextField and qx.ui.form.PasswordField. These extended     widgets also interacts like the basic QxWidgets with the qx.event.handler.FocusHandler.</p>"},
{nr:"1",title:"Flash 1",name:"Flash_1.html",desc:"<p>Simple test for qx.ui.embed.Flash.</p>"},
{nr:"1",title:"Fsm 1",name:"Fsm_1.html",desc:"<p>     Simple test of a finite state machine.  This is a sufficiently simple     application that using a finite state machine really doesn't make sense,     but it is illustrative of how to use it.  This FSM has two states.     </p>"},
{nr:"1",title:"GalleryList 1",name:"GalleryList_1.html",desc:"<p>ListSort implementation</p>"},
{nr:"1",title:"Gallery 1",name:"Gallery_1.html",desc:"<p>Test file for qx.ui.embed.Gallery</p>"},
{nr:"1",title:"GroupBox 1",name:"GroupBox_1.html",desc:"<p>Introducing qx.ui.groupbox.GroupBox.</p>"},
{nr:"2",title:"GroupBox 2",name:"GroupBox_2.html",desc:"<p>Test for qx.ui.groupbox.CheckGroupBox</p>"},
{nr:"3",title:"GroupBox 3",name:"GroupBox_3.html",desc:"<p>Test for qx.ui.groupbox.RadioGroupBox</p>"},
{nr:"1",title:"Iframe 1",name:"Iframe_1.html",desc:"<p>Iframe implementation. Elastic.</p>"},
{nr:"1",title:"Inline 1",name:"Inline_1.html",desc:"<p>Inline widget.</p><p>Application layout is disabled by using qx.core.Settings. Scrollbars appear, if the content is bigger than the window.</p>"},
{nr:"1",title:"ListView 1",name:"ListView_1.html",desc:"<p>Testing qx.ui.listview.ListView with text cells.</p>     <p>Testing of column alignment, resizeable prohibition for columns and live resizing.</p>"},
{nr:"2",title:"ListView 2",name:"ListView_2.html",desc:"<p>Testing qx.ui.listview.ListView with text cells and an additional icon.</p>"},
{nr:"3",title:"ListView 3",name:"ListView_3.html",desc:"<p>Testing qx.ui.listview.ListView with iconHtml cells.</p>"},
{nr:"4",title:"ListView 4",name:"ListView_4.html",desc:"<p>Testing qx.ui.listview.ListView with text cells.</p>     <p>Added some sort handling stuff.</p>"},
{nr:"1",title:"List 1",name:"List_1.html",desc:"<p>List implementation</p>"},
{nr:"1",title:"Menu 1",name:"Menu_1.html",desc:"<p>qx.ui.menu.Menu Implementation.</p>     <p>Added qx.client.Command support tests.</p>"},
{nr:"1",title:"NativeWindow 1",name:"NativeWindow_1.html",desc:"<p>Native Windows. Could be understood as an enhanced window.open with some additional options like to create modal windows.</p>"},
{nr:"1",title:"RadioButton 1",name:"RadioButton_1.html",desc:"<p>Tests for qx.ui.form.RadioButton. qx.ui.form.RadioButton extends qx.ui.basic.Atom and so it inherits all the options and properties defined there.</p>     <p>To group multiple QxRadioButtons you must define a instance of qx.ui.selection.RadioManager and add them to this new instance. All QxRadioButtons assigned to the same group make sure that only one of them is checked at the same time.</p>     <p>"},
{nr:"1",title:"RadioView 1",name:"RadioView_1.html",desc:"<p>qx.ui.pageview.radioview.RadioView implementation</p>"},
{nr:"1",title:"RecursiveCheckBoxTree 1",name:"RecursiveCheckBoxTree_1.html",desc:""},
{nr:"1",title:"RepeatButton 1",name:"RepeatButton_1.html",desc:"<p>Test the qx.ui.form.RepeatButton constructor. qx.ui.form.RepeatButton is based on qx.ui.form.Button but adds some interval handled event mechanism.</p>"},
{nr:"1",title:"Resizer 1",name:"Resizer_1.html",desc:"<p>Test for qx.ui.resizer.Rezizer.</p>     <p>       The Resizer widget acts as a wrapper of another widget.  It allows the child widget to be resized by the end user.     </p>"},
{nr:"1",title:"RpcTree 1",name:"RpcTree_1.html",desc:"<p><strong>Only works together with a RPC backend!</strong></p>     <p>     Shows a tree which listens for tree events.  This script communicates via     JSON-RPC to a backend server.  Each time a new tree node is opened, the     children are requested from the server.  See the server-side functions     at backend/php/services/qooxdoo/fs.php.   </p>"},
{nr:"1",title:"Spinner 1",name:"Spinner_1.html",desc:"<p>Test for qx.ui.form.Spinner.</p>"},
{nr:"1",title:"SplitPane 1",name:"SplitPane_1.html",desc:"<p>Test for normal width Splitpane, no holding knobs, live resize enabled.</p>"},
{nr:"2",title:"SplitPane 2",name:"SplitPane_2.html",desc:"<p>Test for extra slim Splitpane, with holding knobs.</p>"},
{nr:"1",title:"Table 1",name:"Table_1.html",desc:"<p>A table with virtual scrolling, model-view-controller, renderers,       editing, sorting, column resizing, column reordering,       column hiding.</p>"},
{nr:"2",title:"Table 2",name:"Table_2.html",desc:"<p>A table with fixed columns.</p>"},
{nr:"3",title:"Table 3",name:"Table_3.html",desc:"<p>   Table using the ConditionalDataCellRenderer to display values in different   ranges using varying colors; and the ImageDataCellRenderer to display   varying images.   </p>"},
{nr:"4",title:"Table 4",name:"Table_4.html",desc:"<p>   Table using the Filtered data cell rendererl that allows for hiding rows   client side. You can specify to filter rows based on numeric values or on   regex matching.   </p>"},
{nr:"1",title:"TabView 1",name:"TabView_1.html",desc:"<p>Tabbar implementation.</p>"},
{nr:"2",title:"TabView 2",name:"TabView_2.html",desc:"<p>Tabbar implementation.</p>"},
{nr:"1",title:"ToolBar 1",name:"ToolBar_1.html",desc:"<p>Introduce all classes needed for creating real qx.ui.toolbar.ToolBars. This includes qx.ui.toolbar.ToolBars,     qx.ui.toolbar.ToolBarParts, qx.ui.toolbar.Separator and qx.ui.toolbar.ToolBarButtons.</p>      <p>The qx.ui.toolbar.ToolBarButtons and QxRadioButtons in this example are beautifully     decoupled by \"global\" qx.event.type.DataEvent.</p>"},
{nr:"2",title:"ToolBar 2",name:"ToolBar_2.html",desc:"<p>Introducing qx.ui.toolbar.CheckBox and qx.ui.toolbar.RadioButton.</p>"},
{nr:"3",title:"ToolBar 3",name:"ToolBar_3.html",desc:"<p>Again a nice example which shows how to use qx.ui.toolbar.ToolBar as a menubar system.</p>"},
{nr:"4",title:"ToolBar 4",name:"ToolBar_4.html",desc:"<p>Again a nice example which shows how to use qx.ui.toolbar.ToolBar as a menubar system.</p>     <p>Added some parts and a new flex zone which aligns the help button to the right edge</p>     <p>Added some image and a qx.ui.toolbar.CheckBox, you can event combine all these features as you can easily see here.</p>"},
{nr:"1",title:"ToolTip 1",name:"ToolTip_1.html",desc:"<p>Test for QxToolTips. Each qx.ui.popup.ToolTip could be assigned to any     instance of qx.ui.core.Widget. You could also use one qx.ui.popup.ToolTip instance     for multiple QxWidgets (to show the same tooltip any multiple items).</p>"},
{nr:"2",title:"ToolTip 2",name:"ToolTip_2.html",desc:"<p>Test for QxToolTips to demonstrate that each tool-tip gets displayed in the     viewable area. </p>"},
{nr:"1",title:"TreeVirtual 1",name:"TreeVirtual_1.html",desc:"<p>Test large trees.  This one adds a Spam branch with 3000 leaf nodes.</p>"},
{nr:"2",title:"TreeVirtual 2",name:"TreeVirtual_2.html",desc:"<p>Show use of events upon tree opening and closing, including adding     nodes dynamically upon tree open and removing the open/close button upon     tree open if the branch contains no children.     </p><p>     Allows controlling selection mode.  Labels of selected items are     displayed.      </p>"},
{nr:"3",title:"TreeVirtual 3",name:"TreeVirtual_3.html",desc:"<p>       Demonstrate use of multiple columns in a tree, and the use of the       getHierarchy() method to retrieve the entire tree path of a node.       Allows various options to be manipulated.     </p>"},
{nr:"4",title:"TreeVirtual 4",name:"TreeVirtual_4.html",desc:"<p>Demonstrate providing initially-selected tree nodes.</p>"},
{nr:"5",title:"TreeVirtual 5",name:"TreeVirtual_5.html",desc:"<p>Demonstrate providing initially-selected tree nodes.</p>"},
{nr:"6",title:"TreeVirtual 6",name:"TreeVirtual_6.html",desc:"<p>Demonstrate drag &amp; drop in a TreeVirtual.</p>"},
{nr:"1",title:"Tree 1",name:"Tree_1.html",desc:"<p>Shows a tree, with user-defined icons for some nodes.</p>"},
{nr:"2",title:"Tree 2",name:"Tree_2.html",desc:"<p>Shows a tree, with user-defined icons for some nodes.</p>"},
{nr:"3",title:"Tree 3",name:"Tree_3.html",desc:"<p>Shows a tree, with user-defined extra fields.  In this example, the extra fields include a left-justified icon, a checkbox between the node icon and the label, and a whole series of right-justified fields.  Additionally, the root node may be hidden. </p>"},
{nr:"4",title:"Tree 4",name:"Tree_4.html",desc:"<p>Shows a tree, with user-defined icons for some nodes.  This tests     listening for tree events.  A separate alert is generated upon opening a     folder that has contents; when opening a folder that has no contents; and     closing a folder.</p><p>We also demonstrate changing the default value of     'allowShowPlusMinusSymbol' so that all folders initially have a plus/minus     symbol.  Then, upon opening an empty folder, we remove that     icon.</p><p>Lastly, we demonstrate in the alert presented by tree events,     use of the getHierarchy() method to obtain a full \"path\" for a tree     node.</p>"},
{nr:"5",title:"Tree 5",name:"Tree_5.html",desc:"<p>Shows a tree and allows playing with the settings of the Tree     properties <i>hideNode</i> and <i>rootOpenClose</i>.  Also demonstrates     manipulating display (or not) of tree lines at specific indentation     levels, using the <i>excludeSpecificTreeLines</i> property.</p>     Relates to bug #260."},
{nr:"6",title:"Tree 6",name:"Tree_6.html",desc:"<p>Shows a tree, with user-defined extra fields.  In this example, the extra fields include a left-justified icon, a pair of radio buttons between the node icon and the label, and a whole series of right-justified fields. Additionally, the root node may be hidden. </p>"},
{nr:"1",title:"Window 1",name:"Window_1.html",desc:"<p>This is the qx.ui.window.Window widget. These should emulate the default look and behaviour of the application windows running under Microsoft Windows(TM).</p>"}
]
},{classname:"test",tests:[
{nr:"1",title:"Atom 1",name:"Atom_1.html",desc:"<p>Some speed tests for qx.ui.basic.Atom. Please regard, that many of things in the finished     page are modified on the already created and visible qx.ui.basic.Atom instances. This is not     a good example in scripting qooxdoo. It's always faster to configure a instance of qx.ui.core.Widget     completely, before add it to the qx.ui.core.ClientDocument or any other visible parent qx.ui.core.Widget.</p>"},
{nr:"2",title:"Atom 2",name:"Atom_2.html",desc:"<p>Example to show correct calculations of qx.ui.basic.Atom sizes. Normally a qx.ui.basic.Atom has only the size of its content.</p>"},
{nr:"3",title:"Atom 3",name:"Atom_3.html",desc:"<p>Layout tests for qx.ui.basic.Atom reimplementation.</p>"},
{nr:"4",title:"Atom 4",name:"Atom_4.html",desc:""},
{nr:"5",title:"Atom 5",name:"Atom_5.html",desc:"<p>Adding many qx.ui.basic.Atom widgets without setting the icon-width and -height.</p>"},
{nr:"6",title:"Atom 6",name:"Atom_6.html",desc:"<p>Adding many qx.ui.basic.Atom widgets setting the icon-width and -height.</p>"},
{nr:"7",title:"Atom 7",name:"Atom_7.html",desc:""},
{nr:"8",title:"Atom 8",name:"Atom_8.html",desc:""},
{nr:"9",title:"Atom 9",name:"Atom_9.html",desc:"This uses qx.ui.basic.Label instead of qx.ui.basic.Atom for text only display. Stored as Atom test file     because this way we could compare it to the previous test file."},
{nr:"1",title:"Border 1",name:"Border_1.html",desc:"<p>Test for qx.ui.core.Border, a cross-browser advanced border engine.     Each instance of qx.ui.core.Border allows to affect multiple QxTerminators.     When the one property of the qx.ui.core.Border change, it informs all bounded     QxTerminators to rerender the border.</p>      <p>The qx.ui.core.Border constructor also allows you to convert a string     (css-like) into and qx.ui.core.Border instance (last example).</p>"},
{nr:"1",title:"BoxLayout 1",name:"BoxLayout_1.html",desc:"<p>Now something more complex. Try to configure multiple things and then press &lt;apply&gt;.</p>"},
{nr:"2",title:"BoxLayout 2",name:"BoxLayout_2.html",desc:"<p>Now something more complex. Try to configure multiple things and then press &lt;apply&gt;.</p>     <p>Added initial support for children align override: Try to click on the color palette.</p>"},
{nr:"1",title:"Builder 1",name:"Builder_1.html",desc:"<p>qx.util.GuiBuilder demo.</p>     <p>Build your web apps using qooxdooml.</p>     <p>Textarea example</p>"},
{nr:"2",title:"Builder 2",name:"Builder_2.html",desc:"<p>qx.util.GuiBuilder demo.</p>     <p>Build your web apps using qooxdooml.</p>     <p>XmlHttp Example</p>"},
{nr:"3",title:"Builder 3",name:"Builder_3.html",desc:"<p>qx.util.GuiBuilder demo.</p>     <p>Build your web apps using qooxdooml.</p>     <p>Property Editor Example</p>"},
{nr:"4",title:"Builder 4",name:"Builder_4.html",desc:"<p>qx.util.GuiBuilder demo.</p>     <p>2 Format Example</p>"},
{nr:"1",title:"Button 1",name:"Button_1.html",desc:"<p>Testing the new flash support for QxButtons (inherited from qx.ui.basic.Atom).</p>"},
{nr:"1",title:"CanvasLayout 1",name:"CanvasLayout_1.html",desc:""},
{nr:"3",title:"CanvasLayout 3",name:"CanvasLayout_3.html",desc:"<p>This test is using multiple qx.ui.basic.Terminator</p>"},
{nr:"4",title:"CanvasLayout 4",name:"CanvasLayout_4.html",desc:"<p>This test is using multiple div-Elements</p>   <p>Created with \"createElement\" and added via \"appendChild\" to the document.</p>"},
{nr:"5",title:"CanvasLayout 5",name:"CanvasLayout_5.html",desc:"<p>This test is using multiple div-Elements</p>   <p>Added to the document using the \"innerHTML\" property.</p>"},
{nr:"1",title:"Clipping 1",name:"Clipping_1.html",desc:"<p>Tests for clipping implementation</p>"},
{nr:"1",title:"ComboBox 1",name:"ComboBox_1.html",desc:"<p>Testing qx.ui.form.ComboBox implementation.</p>     <p>Testing object creation (the list content will be filled then) on first open.</p>"},
{nr:"2",title:"ComboBox 2",name:"ComboBox_2.html",desc:"<p>Testing qx.ui.form.ComboBox implementation.</p>     <p>Testing object creation (the list content will be filled then) on first open.</p>     <p>Added Color Theme Buttons</p>"},
{nr:"3",title:"ComboBox 3",name:"ComboBox_3.html",desc:"<p>Testing qx.ui.form.ComboBox implementation.</p>     <p>Testing object creation (the list content will be filled then) on first open.</p>     <p>Added Color Theme Buttons</p>     <p>Now with image inside the popup.</p>"},
{nr:"4",title:"ComboBox 4",name:"ComboBox_4.html",desc:"<p>Testing qx.ui.form.ComboBox behaviour when inside a container with scroll bars and the popup list goes off the screen.</p>"},
{nr:"1",title:"CookieStorage 1",name:"CookieStorage_1.html",desc:"<p>Tests for qx.io.local.CookieApi.</p>"},
{nr:"2",title:"CookieStorage 2",name:"CookieStorage_2.html",desc:"<p>Tests for qx.io.local.CookieTransport API.</p>"},
{nr:"1",title:"Cookie 1",name:"Cookie_1.html",desc:"<p>Tests for qx.io.local.CookieApi.</p>"},
{nr:"1",title:"CrossBrowser 1",name:"CrossBrowser_1.html",desc:"<fieldset style=\"padding:3px; background-color:#fff; text-align:right\"><legend style=\"color:red\">Outer</legend>     <span style=\"color:blue; font-style:italic\">Margin</span>     <fieldset style=\"margin:3px 10px; padding:3px 10px; background-color:#bbb\"><legend style=\"color:red\">Box</legend>     <span style=\"color:blue; font-style:italic\">Inset (Border + Scrollbar)</span>     <fieldset style=\"margin:3px 10px; padding:3px 10px; background-color:#999\"><legend style=\"color:red\">Area</legend>     <span style=\"color:blue; font-style:italic\">Padding</span>     <fieldset style=\"margin:3px 10px; padding:3px 10px; background-color:#666\"><legend style=\"color:red\">Inner</legend>     </fieldset>     </fieldset>     </fieldset>     </fieldset>"},
{nr:"2",title:"CrossBrowser 2",name:"CrossBrowser_2.html",desc:"<p>Tests for crossbrowser offsetTop and offsetLeft properties provided by qx.dom</p>"},
{nr:"1",title:"CSS 1",name:"CSS_1.html",desc:"<p>Some tests of qx.html.StyleSheet</p>"},
{nr:"1",title:"DateChooserButton 1",name:"DateChooserButton_1.html",desc:"<p>Test the date chooser button component.</p>     <p>This widget can be associated to another widget (in this case a textfield) which then     is synchronized with the selected date from the date chooser</p>     <p>The locale and the date format size can be changed</p>"},
{nr:"2",title:"DateChooserButton 2",name:"DateChooserButton_2.html",desc:"<p>Test the date chooser button component.</p>     <p>This widget can be associated to another widget (in this case a textfield) which then     is synchronized with the selected date from the date chooser</p>     <p>The second demo is localized for german dates</p>"},
{nr:"1",title:"DockLayout 1",name:"DockLayout_1.html",desc:"Simple Test for qx.ui.layout.DockLayout."},
{nr:"2",title:"DockLayout 2",name:"DockLayout_2.html",desc:"The next generation of table-less layouts ;)"},
{nr:"3",title:"DockLayout 3",name:"DockLayout_3.html",desc:"Testing Layouts inside the qx.ui.layout.DockLayout. In this example centering through qx.ui.layout.HorizontalBoxLayout."},
{nr:"4",title:"DockLayout 4",name:"DockLayout_4.html",desc:"Same as the previous one, but additional the dimensions of the qx.ui.layout.DockLayout are defined as percents here."},
{nr:"5",title:"DockLayout 5",name:"DockLayout_5.html",desc:"Same as the previous one, but additional added multiple children to the box layout."},
{nr:"6",title:"DockLayout 6",name:"DockLayout_6.html",desc:"Simple Test for qx.ui.layout.DockLayout. But with a dynamic child. Simple click on \"Hello World\" to see the effect."},
{nr:"1",title:"DragAndDropManager 1",name:"DragAndDropManager_1.html",desc:"<p>Test for drag&#38;drop implementation.</p>     <p>Changing the action using the modifier keys (Shift, Alt, Control) might not work in Safari.</p>"},
{nr:"2",title:"DragAndDropManager 2",name:"DragAndDropManager_2.html",desc:"<p>Test for drag&#38;drop implementation.</p>     <p>Changing the action using the modifier keys (Shift, Alt, Control) might not work in Safari.</p>"},
{nr:"1",title:"EnabledDisabled 1",name:"EnabledDisabled_1.html",desc:"<p>Some test for the enable property in QxObject which will be extended from qx.ui.core.Widget and any other     widget which need additional handling on a change of this property. Keep in mind: Disabled QxWidgets will be ignored     from the QxEventManager and the qx.event.handler.FocusHandler.</p>"},
{nr:"1",title:"Fading 1",name:"Fading_1.html",desc:"<p></p>"},
{nr:"1",title:"FieldSet 1",name:"FieldSet_1.html",desc:"<p>A more complex example than the previous one. Use layout managers for its content. Configured minWidth of the qx.ui.groupbox.GroupBox with \"auto\".</p>"},
{nr:"1",title:"Fields 1",name:"Fields_1.html",desc:"<p>Test the setting of background color of form fields.</p>"},
{nr:"1",title:"FlowLayout 1",name:"FlowLayout_1.html",desc:"Tests for the new implementation of the qx.ui.layout.FlowLayout widget."},
{nr:"2",title:"FlowLayout 2",name:"FlowLayout_2.html",desc:"Tests for the new implementation of the qx.ui.layout.FlowLayout widget."},
{nr:"3",title:"FlowLayout 3",name:"FlowLayout_3.html",desc:"Tests for the new implementation of the qx.ui.layout.FlowLayout widget."},
{nr:"1",title:"FocusManager 1",name:"FocusManager_1.html",desc:"<p>Some tests for some of the most used properties of qx.ui.basic.Terminator (coordinates, dimensions, backgroundColor, opacity, ...).</p>     <p>Also here are the first test of some widgets which extend qx.ui.basic.Terminator: qx.ui.form.TextField and qx.ui.form.PasswordField. These extended     widgets also interacts like the basic QxTerminators with the qx.event.handler.FocusHandler.</p>"},
{nr:"2",title:"FocusManager 2",name:"FocusManager_2.html",desc:""},
{nr:"1",title:"Font 1",name:"Font_1.html",desc:"<p>Testing qx.ui.core.Font object for labels inside atoms.</p>"},
{nr:"1",title:"FormUtils 1",name:"FormUtils_1.html",desc:"<p>Testing qx.html.Form</p>"},
{nr:"2",title:"Gallery 2",name:"Gallery_2.html",desc:"<p>Test file for qx.ui.embed.Gallery</p>"},
{nr:"3",title:"Gallery 3",name:"Gallery_3.html",desc:"<p>Test file for qx.ui.embed.Gallery, now with ToolTips assigned.</p>     <button onclick=\"updateAdd()\">Update Add</button>"},
{nr:"1",title:"GridLayout 1",name:"GridLayout_1.html",desc:"<p>Test for qx.ui.layout.GridLayout.</p>"},
{nr:"10",title:"GridLayout 10",name:"GridLayout_10.html",desc:"<p>Layout Manager: qx.ui.layout.GridLayout. Example image borrowed from <a href=\"http://winfx.msdn.microsoft.com/library/en-us/wcp_conceptual/winfx/layout/overviews/grid_ovw.asp\">Microsoft's XAML Documentation</a>.</p>"},
{nr:"11",title:"GridLayout 11",name:"GridLayout_11.html",desc:"<p>Layout Manager: qx.ui.layout.GridLayout. Example image borrowed from <a href=\"http://winfx.msdn.microsoft.com/library/en-us/wcp_conceptual/winfx/layout/overviews/grid_ovw.asp\">Microsoft's XAML Documentation</a>.</p>"},
{nr:"2",title:"GridLayout 2",name:"GridLayout_2.html",desc:"<p>Test for qx.ui.layout.GridLayout.</p>     <p>Added some own sizes and use more complex children.</p>     <p>The olive child has a width of 50% (which is related to the cell size here) and a horizontal alignment 'center'.</p>     <p>The navi child has a height of 20 pixel and is aligned to the bottom of the cell.</p>"},
{nr:"3",title:"GridLayout 3",name:"GridLayout_3.html",desc:"<p>Test for qx.ui.layout.GridLayout.</p>     <p>Using auto dimensions for the grid.</p>"},
{nr:"4",title:"GridLayout 4",name:"GridLayout_4.html",desc:"<p>Test for qx.ui.layout.GridLayout.</p>     <p>Using percents for children.</p>"},
{nr:"5",title:"GridLayout 5",name:"GridLayout_5.html",desc:"<p>A simple form using qx.ui.layout.GridLayout</p>"},
{nr:"6",title:"GridLayout 6",name:"GridLayout_6.html",desc:"<p>A simple form using qx.ui.layout.GridLayout</p>     <p>Using padding instead of spacing. Spacing is between the cells, padding is inside the cells. The same layout using padding is always bigger because the first and last cells are also affected with the padding to the edge.</p>"},
{nr:"7",title:"GridLayout 7",name:"GridLayout_7.html",desc:"<p>Test for qx.ui.layout.GridLayout. Now with cells which are merged with others.</p>"},
{nr:"8",title:"GridLayout 8",name:"GridLayout_8.html",desc:"<p>Test for qx.ui.layout.GridLayout. Now with cells which are merged with others.</p>     <p>Added spacing in combination with spans.</p>"},
{nr:"9",title:"GridLayout 9",name:"GridLayout_9.html",desc:"<p>Test for qx.ui.layout.GridLayout. Now with cells which are merged with others.</p>     <p>Added spacing in combination with spans.</p>     <p>Added padding in combination with spans.</p>"},
{nr:"1",title:"History 1",name:"History_1.html",desc:"<p>Test the back button functionality of qooxdoo.</p>"},
{nr:"1",title:"HorizontalBoxLayout 1",name:"HorizontalBoxLayout_1.html",desc:"Tests for the new implementation of the qx.ui.layout.HorizontalBoxLayout widget."},
{nr:"2",title:"HorizontalBoxLayout 2",name:"HorizontalBoxLayout_2.html",desc:"Tests for the new implementation of the qx.ui.layout.HorizontalBoxLayout widget.     This example includes a child with a width defined as percent. This makes     things much more complex (especially on resizing of the parent) so this also     dramatically reduces the speed ;)"},
{nr:"3",title:"HorizontalBoxLayout 3",name:"HorizontalBoxLayout_3.html",desc:"Tests for the new implementation of the qx.ui.layout.HorizontalBoxLayout widget.<br/>     <br/>     1. Simple testing, one static and one flex child<br/>     2. Two flex children with the same priority<br/>     3. The same as #2, but the second has the doubled priority compared to the first<br/>     <br/>      4. The same as #3, but now the second child has a max-width of 50px<br/>     5. The same as #4, but now with enabled \"advancedFlexAllocation\"<br/>     <br/>      6. The same as #3, but now the second has a min width of 500px<br/>     7. The same as #6, but now with enabled \"advancedFlexAllocation\"<br/>     <br/>      8. Three children with the priorities: 1, 2 and 3. The second has a maxWidth of 50px<br/>     9. The same as #8, but now with enabled \"advancedFlexAllocation\"<br/>     <br/>      10. Three children with the priorities: 1, 2 and 3. Added a few mouse actions.<br/>     11. Three children with the priorities: 1, a static width of 80px and 3.<br/>     12. The same as #11, but configured as 'auto' width.<br/>     <br/>      13. Test for more complex child widgets. Seems to work without problems."},
{nr:"1",title:"HtmlAbstract 1",name:"HtmlAbstract_1.html",desc:""},
{nr:"1",title:"HtmlElement 1",name:"HtmlElement_1.html",desc:""},
{nr:"2",title:"HtmlElement 2",name:"HtmlElement_2.html",desc:""},
{nr:"1",title:"HtmlLayout 1",name:"HtmlLayout_1.html",desc:"<p>A qoodoo application with \"qx.enableApplicationLayout\" disabled.</p>"},
{nr:"1",title:"HtmlTable 1",name:"HtmlTable_1.html",desc:"<p>Test table.</p>"},
{nr:"2",title:"HtmlTable 2",name:"HtmlTable_2.html",desc:"<p>Test table with fixed column widths: 100, 50, 10, 30 and 20 pixel.</p>"},
{nr:"3",title:"HtmlTable 3",name:"HtmlTable_3.html",desc:"<p>Test table.</p>"},
{nr:"1",title:"IconHtml 1",name:"IconHtml_1.html",desc:"<p>Testing qx.ui.embed.IconHtmlEmbed.</p>"},
{nr:"1",title:"Image 1",name:"Image_1.html",desc:"<p>This is a test for the qx.ui.basic.Image constructor. It supports automatic preloading through qx.io.image.Preloader, with error and load     QxEvents which will be fired, and cross-browser PNG with extended alpha channels.</p>      <p>PNG file in HTML (in Internet Explorer this should not be transparent):</p>     <img src=\"../../../../../framework/source/resource/icon/CrystalClear/48/categories/applications-games.png\" width=\"48\" height=\"48\"/>"},
{nr:"2",title:"Image 2",name:"Image_2.html",desc:"Some advanced tests for qx.ui.basic.Image. Click on the fourth and fivth image to test the reflow possibilities.     The debug log gives you information of the preferred dimensions."},
{nr:"1",title:"Keyhandler 1",name:"Keyhandler_1.html",desc:"<p>Keyhandler Test</p> 		<p>Displays qoooxdoo's normalized key events.</p>"},
{nr:"1",title:"Label 1",name:"Label_1.html",desc:"Some tests for qx.ui.basic.Label. Click on the third and fifth button like widget to test the reflow possibilities.     The debug log gives you information of the preferred dimensions."},
{nr:"2",title:"Label 2",name:"Label_2.html",desc:"qx.ui.basic.Label Stress Test"},
{nr:"3",title:"Label 3",name:"Label_3.html",desc:"<p>Some tests for qx.ui.basic.Label. Click on the third and fifth button like widget to test the reflow possibilities.     The debug log gives you information of the preferred dimensions.</p>     <p>Tests for qx.ui.core.Font added</p>"},
{nr:"4",title:"Label 4",name:"Label_4.html",desc:"<p>Testing mnemonic support.</p>"},
{nr:"1",title:"Leak 1",name:"Leak_1.html",desc:"<p>Leak-Test</p>"},
{nr:"1",title:"Link 1",name:"Link_1.html",desc:"<p>Testing link widget.</p>"},
{nr:"1",title:"ListView 1",name:"ListView_1.html",desc:"<p>Testing qx.ui.listview.ListView with text cells.</p>"},
{nr:"10",title:"ListView 10",name:"ListView_10.html",desc:"<p>Testing qx.ui.listview.ListView in a qx.ui.window.Window.</p>     <p>I am sorry, but this seems not to be fixable with the current layouter stuff in qooxdoo.</p>"},
{nr:"2",title:"ListView 2",name:"ListView_2.html",desc:"<p>Testing qx.ui.listview.ListView with text cells with an additional link.</p>"},
{nr:"3",title:"ListView 3",name:"ListView_3.html",desc:"<p>Testing qx.ui.listview.ListView with text cells.</p>     <p>Now with icons inside the header cells.</p>"},
{nr:"4",title:"ListView 4",name:"ListView_4.html",desc:"<p>Testing qx.ui.listview.ListView with text cells.</p>     <p>This qx.ui.listview.ListView will be resized with the window.</p>"},
{nr:"5",title:"ListView 5",name:"ListView_5.html",desc:"<p>Testing qx.ui.listview.ListView with text cells.</p>     <p>This qx.ui.listview.ListView will be resized with the window.</p>     <p>Using percents for columns.</p>"},
{nr:"6",title:"ListView 6",name:"ListView_6.html",desc:"<p>Testing qx.ui.listview.ListView with text cells.</p>     <p>Supports minimum and maximum width of columns.</p>"},
{nr:"7",title:"ListView 7",name:"ListView_7.html",desc:"<p>Testing qx.ui.listview.ListView with text cells.</p>     <p>Added some buttons to fill/clear the list dynamically.</p>"},
{nr:"8",title:"ListView 8",name:"ListView_8.html",desc:"<p>Testing qx.ui.listview.ListView with text cells.</p>     <p>And with drag and drop between the two qx.ui.listview.ListViews.</p>"},
{nr:"9",title:"ListView 9",name:"ListView_9.html",desc:"<p>Testing qx.ui.listview.ListView with text cells.</p>     <p>And with drag and drop between the two qx.ui.listview.ListViews.</p>     <p>Reduced columns for second listview.</p>"},
{nr:"1",title:"List 1",name:"List_1.html",desc:"<p>List implementation. Now testing auto dimensions.</p>"},
{nr:"2",title:"List 2",name:"List_2.html",desc:"<p>List implementation</p>     <p>Drag and Drop Handling added</p>"},
{nr:"3",title:"List 3",name:"List_3.html",desc:"<p>qx.ui.form.List Item Sorting demo</p>"},
{nr:"1",title:"Location 1",name:"Location_1.html",desc:""},
{nr:"1",title:"Menu 1",name:"Menu_1.html",desc:"<p>qx.ui.menu.Menu Implementation</p>"},
{nr:"2",title:"Menu 2",name:"Menu_2.html",desc:"<p>qx.ui.menu.Menu Implementation.</p>     <p>Added qx.client.Command support tests.</p>     <p>Create the menu instances on the first opening.</p>"},
{nr:"1",title:"Node 1",name:"Node_1.html",desc:"<p>qx.ui.embed.NodeEmbed makes a dom node a widget.</p>"},
{nr:"1",title:"Popups 1",name:"Popups_1.html",desc:"<p>Test for the qx.ui.popup.Popup widget. qx.ui.popup.Popups are planned as the source constructor for tooltips, menus, ...</p>     <p>There is also a qx.ui.popup.PopupManager which hides all registered qx.ui.popup.Popup instances which are configured to auto hide.     This is a nice method to omit to show more than one qx.ui.popup.Popup together (omit multiple QxTooltips, ...).</p>"},
{nr:"2",title:"Popups 2",name:"Popups_2.html",desc:"<p>Test for the qx.ui.popup.Popup widget. qx.ui.popup.Popups are planned as the source constructor for tooltips, menus, ...</p>     <p>There is also a qx.ui.popup.PopupManager which hides all registered qx.ui.popup.Popup instances which are configured to auto hide.     This is a nice method to omit to show more than one qx.ui.popup.Popup together (omit multiple QxTooltips, ...).</p>     <p>In this example we use a qx.ui.popup.PopupAtom. This is a popup with an automatically included qx.ui.basic.Atom, which     allowes you to easily use it for messages to the user or something like this.</p>"},
{nr:"1",title:"Property 1",name:"Property_1.html",desc:"<p></p>"},
{nr:"1",title:"RPC 1",name:"RPC_1.html",desc:"<p><strong>Only works together with a RPC backend!</strong></p>     <p>Test for RPC functionality.</p>     <p>       This test calls a simple echo-style service on the server. The server       method accepts a string and sends back a string that says       \"Client said: [input string]\".     </p>"},
{nr:"2",title:"RPC 2",name:"RPC_2.html",desc:"<p><strong>Only works together with a RPC backend!</strong></p>     <p>Test for RPC functionality.</p>     <p>       This tests the ability to issue multiple asynchronous RPC calls to the       same service/method, and determine from which request we have received a       response.  We issue multiple 'sleep' calls, for decreasing amounts of       time, and ensure that we can associate the resonses from the       later-issued requests to the earlier-received responses.     </p>"},
{nr:"3",title:"RPC 3",name:"RPC_3.html",desc:"<p>Test for RPC functionality.</p>     <p>       This test calls a whole set of functions to test each of the primitive       data types.  The comparison results should all end with \": true\", and       the last test generates an Application Error (#1000).  No other test       generates that error, so receiving it means the complete set of tests       was run.     </p>     <p>       These functions all use the synchronous interface.  You should not use       the synchronous interface because with some browsers, the entire browser       environment locks up during a synchronous call.  If the server hangs for       a minute or two, so will the browser!  You have been warned.     </p>"},
{nr:"4",title:"RPC 4",name:"RPC_4.html",desc:"<p><strong>Only works together with a RPC backend!</strong></p>     <p>Test for RPC functionality.</p>     <p>       This test calls a whole set of functions to test each of the primitive       data types.  The comparison results should all end with \": true\", and       the last test generates an Application Error (#1000).  No other test       generates that error, so receiving it means the complete set of tests       was run.     </p>     <p>       These functions all use the asynchronous interface.  This is the       interface that your applications should use.  See the warning in       RPC_3.html regarding use of the synchronous interface.     </p>"},
{nr:"5",title:"RPC 5",name:"RPC_5.html",desc:"<p><strong>Only works together with a RPC backend!</strong></p>     <p>Test for RPC functionality.</p>     <p>       This test calls remote function getParams(), passing a defined field in       an object, and an undefined field in an object.  Depending on the       setting of qx.core.Settings.jsonEncodeUndefined, the undefined field       should or should not be sent.  We also send some (ignored) server data       in this test, if requested.     </p>"},
{nr:"6",title:"RPC 6",name:"RPC_6.html",desc:"<p><strong>Only works together with a RPC backend!</strong></p>     <p>Test for RPC functionality.</p>     <p>       This tests the ability to issue multiple asynchronous RPC calls to the       same service/method, and determine from which request we have received a       response.  We issue multiple 'sleep' calls, for decreasing amounts of       time, and ensure that we can associate the resonses from the       later-issued requests to the earlier-received responses.     </p>"},
{nr:"1",title:"Spinner 1",name:"Spinner_1.html",desc:"<p>Test for qx.ui.form.Spinner.</p>"},
{nr:"1",title:"SplitPane 1",name:"SplitPane_1.html",desc:"<p>Test for Splitpane functionality with enabled live resize.</p>"},
{nr:"1",title:"Table 1",name:"Table_1.html",desc:"<p>The default table using divs and nodeValue.</p>"},
{nr:"2",title:"Table 2",name:"Table_2.html",desc:"<p>a table using divs and Array.join.</p>"},
{nr:"3",title:"Table 3",name:"Table_3.html",desc:"<p>A table using table elements and nodeValue.</p>"},
{nr:"4",title:"Table 4",name:"Table_4.html",desc:"<p>A table using table elements and Array.join.</p>"},
{nr:"5",title:"Table 5",name:"Table_5.html",desc:"<p>A table having few rows.</p>"},
{nr:"CellEditor_1",title:"Table CellEditor 1",name:"Table_CellEditor_1.html",desc:"<p>   Using the Table, qx.ui.table.cellrenderer.Dynamic, qx.ui.table.celleditor.Dynamic, qx.ui.table.celleditor.ComboBox   and cell value validation to build a property editor.   </p>"},
{nr:"1",title:"Tokenizer 1",name:"Tokenizer_1.html",desc:"<p>Test qx.dev.Tokenizer.</p>"},
{nr:"1",title:"ToolBar 1",name:"ToolBar_1.html",desc:"<p>Introduce qx.ui.menu.Menu which opens on qx.ui.toolbar.ToolBarMenuButtons.</p>"},
{nr:"2",title:"ToolBar 2",name:"ToolBar_2.html",desc:"<p>Create ten toolbars. Stress Test.</p>"},
{nr:"3",title:"ToolBar 3",name:"ToolBar_3.html",desc:"<p>Testing the new flash support for qx.ui.toolbar.ToolBarButtons (inherited from qx.ui.basic.Atom).</p>"},
{nr:"4",title:"ToolBar 4",name:"ToolBar_4.html",desc:"<p>Again a nice example which shows how to use qx.ui.toolbar.ToolBar as a menubar system.</p>     <p>Added some parts and a new flex zone which aligns the help button to the right edge</p>"},
{nr:"1",title:"Transport 1",name:"Transport_1.html",desc:"<p>Simple test for qooxdoo's transport implementation using some data for an addressbook.</p>"},
{nr:"2",title:"Transport 2",name:"Transport_2.html",desc:"<p>Testing different file sizes with timeouts and other built-in transport features.</p>"},
{nr:"3",title:"Transport 3",name:"Transport_3.html",desc:"<p>Testing multiple parallel requests of files with different sizes.</p>"},
{nr:"4",title:"Transport 4",name:"Transport_4.html",desc:"<p>Simple test for qooxdoo's transport implementation using some data for an addressbook.</p>     <p>Using text content in this case.</p>"},
{nr:"5",title:"Transport 5",name:"Transport_5.html",desc:"<p>Simple test for qooxdoo's transport implementation using some data for an addressbook.</p>     <p>Using html content in this case.</p>"},
{nr:"6",title:"Transport 6",name:"Transport_6.html",desc:"<p>Simple test for qooxdoo's transport implementation using some data for an addressbook.</p>     <p>Using javascript/json content in this case.</p>"},
{nr:"1",title:"TreeVirtual 1",name:"TreeVirtual_1.html",desc:"<p>     An example of using the Virtual Tree widget with addBranch() and addLeaf()   </p>"},
{nr:"2",title:"TreeVirtual 2",name:"TreeVirtual_2.html",desc:"<p>An example of using the Virtual Tree widget providing the array of tree     nodes en bulk instead of issuing a series of addBranch() and addLeaf()     calls.  This example also colors some nodes.</p>"},
{nr:"1",title:"Tree 1",name:"Tree_1.html",desc:"<p>Introducing qx.ui.tree.Tree. A first small example.</p>"},
{nr:"2",title:"Tree 2",name:"Tree_2.html",desc:"<p>This example is bigger than the previous one.</p>"},
{nr:"3",title:"Tree 3",name:"Tree_3.html",desc:"<p>Nothing special, like the previous example but here the tree lines are by default off.</p>     <p>This allows you to easily compare the performance costs for the tree lines: Just compare this and the previous example.</p>"},
{nr:"4",title:"Tree 4",name:"Tree_4.html",desc:"<p>Test an empty tree</p>"},
{nr:"5",title:"Tree 5",name:"Tree_5.html",desc:"<p>Drag and Drop between trees and inside a tree.</p>"},
{nr:"6",title:"Tree 6",name:"Tree_6.html",desc:"<p>Drag and Drop between trees and inside a tree.</p>     <p>Added support for positioned move/insert (not complete yet!)</p>"},
{nr:"7",title:"Tree 7",name:"Tree_7.html",desc:"<p>Trying dynamic Folder and File creation and deletion.</p>"},
{nr:"1",title:"VerticalBoxLayout 1",name:"VerticalBoxLayout_1.html",desc:"Tests for the new implementation of the qx.ui.layout.VerticalBoxLayout widget."},
{nr:"2",title:"VerticalBoxLayout 2",name:"VerticalBoxLayout_2.html",desc:"Tests for the new implementation of the qx.ui.layout.VerticalBoxLayout widget."},
{nr:"3",title:"VerticalBoxLayout 3",name:"VerticalBoxLayout_3.html",desc:"Tests for the new implementation of the qx.ui.layout.VerticalBoxLayout widget.<br/>     <br/>     1. Simple testing, one static and one flex child<br/>     2. Two flex children with the same priority<br/>     3. The same as #2, but the second has the doubled priority compared to the first<br/>     <br/>      4. The same as #3, but now the second child has a max-height of 50px<br/>     5. The same as #4, but now with enabled \"advancedFlexAllocation\"<br/>     <br/>      6. The same as #3, but now the second has a min height of 300px<br/>     7. The same as #6, but now with enabled \"advancedFlexAllocation\"<br/>     <br/>      8. Three children with the priorities: 1, 2 and 3. The second has a maxHeight of 50px<br/>     9. The same as #8, but now with enabled \"advancedFlexAllocation\"<br/>     <br/>      10. Three children with the priorities: 1, 2 and 3. Added a few mouse actions.<br/>     11. Three children with the priorities: 1, a static height of 80px and 3.<br/>     12. The same as #11, but configured as 'auto' height."},
{nr:"1",title:"Window 1",name:"Window_1.html",desc:"<p>Who Framed Roger Rabbit?</p>"},
{nr:"2",title:"Window 2",name:"Window_2.html",desc:"<p>Testing auto dimension possibility of qx.ui.window.Window.</p>"},
{nr:"3",title:"Window 3",name:"Window_3.html",desc:"<p>Modal dialog with qx.ui.form.TextField and qx.ui.form.TextArea</p>"},
{nr:"4",title:"Window 4",name:"Window_4.html",desc:"<p>Dialog with qx.ui.form.TextField and qx.ui.form.TextArea</p>     <p>Testing minimize handling.</p>"},
{nr:"5",title:"Window 5",name:"Window_5.html",desc:"<p>Some tests for zIndex handling for different widgets.</p>"},
{nr:"6",title:"Window 6",name:"Window_6.html",desc:"<p>Dialog with qx.ui.form.TextField and qx.ui.form.TextArea</p>     <p>Testing initial focus handling.</p>"},
{nr:"7",title:"Window 7",name:"Window_7.html",desc:"<p>qx.ui.basic.Atom is the parent class for buttons, menu entries, icons, checkboxes. While you can do,     you usually don't have to instantiate qx.ui.basic.Atom directly.</p>"}
]
},{classname:"performance",tests:[
{nr:"1",title:"ArrayCreate 1",name:"ArrayCreate_1.html",desc:"<p>Tests for empty Array creation performance</p>     <ol>       <li>Using \"[]\"</li>       <li>Using \"new Array\"</li>       <li>Using \"new Array()\"</li>     </ol>"},
{nr:"2",title:"ArrayCreate 2",name:"ArrayCreate_2.html",desc:"<p>Tests for filled Array creation performance</p>     <ol>       <li>Using \"[ values ]\"</li>       <li>Using \"new Array(values)\"</li>     </ol>"},
{nr:"1",title:"ClassDefine 1",name:"ClassDefine_1.html",desc:"Tests new OO Layer performance"},
{nr:"1",title:"GlobalObject 1",name:"GlobalObject_1.html",desc:"<p>JS Object Storage Performance</p>      <h1>Test Description</h1>     <p>Create 10.000 new (non stored) objects inside a loop. Identical to LocalObject_1.html.</p>      <h1>Result</h1>     <p>The performance in IE is quite good (~330ms for each loop), compared to the same stuff executed without the precreated stuff.</p>"},
{nr:"2",title:"GlobalObject 2",name:"GlobalObject_2.html",desc:"<p>JS Object Storage Performance</p>      <h1>Test Description</h1>     <p>Precreate 50.000 objects (globally stored). After this create 10.000 new (non stored) objects inside a loop.</p>     <p>Keep global storage over runtime.</p>      <h1>Result</h1>     <p>The performance in IE is poor (~1150ms for each loop), compared to the same stuff executed without so much precreated objects (previous example).</p>     <p>It makes no difference if we use a global or a local variable here. It's identical to LocalObject_2.html.</p>"},
{nr:"3",title:"GlobalObject 3",name:"GlobalObject_3.html",desc:"<p>JS Object Storage Performance</p>      <h1>Test Description</h1>     <p>Precreate 50.000 objects (globally stored). After this create 10.000 new (non stored) objects inside a loop.</p>     <p>Use removeAll to clean up global storage after first loop.</p>      <h1>Result</h1>     <p>The additional cleanup (remove all entries) of the global storage optimizes performance after the first loop. First loop is done after ~1150ms. The following loop needs ~490ms. Not bad, but poorly compared to the version, where the storage have never exist before. (See first examples, which executes in ~350ms.)</p>     <p>It makes no difference if we use a global or a local variable here. It's identical to LocalObject_3.html.</p>"},
{nr:"4",title:"GlobalObject 4",name:"GlobalObject_4.html",desc:"<p>JS Object Storage Performance</p>      <h1>Test Description</h1>     <p>Precreate 50.000 objects (globally stored). After this create 10.000 new (non stored) objects inside a loop.</p>     <p>Overwrite global storage to clean up after first loop.</p>      <h1>Result</h1>     <p>The additional cleanup (overwrite with null) of the global storage optimizes performance after the first loop. First loop is done after ~1150ms. The following loop needs ~350ms. Quite good. The same value as in the first example, where the data have never exist.</p>"},
{nr:"1",title:"LocalObject 1",name:"LocalObject_1.html",desc:"<p>JS Object Storage Performance</p>      <h1>Test Description</h1>     <p>Create 10.000 new (non stored) objects inside a loop. Identical to GlobalObject_1.html.</p>      <h1>Result</h1>     <p>The performance in IE is quite good (~330ms for each loop), compared to the same stuff executed without the precreated stuff.</p>"},
{nr:"2",title:"LocalObject 2",name:"LocalObject_2.html",desc:"<p>JS Object Storage Performance</p>      <h1>Test Description</h1>     <p>Precreate 50.000 objects (locally stored). After this create 10.000 new (not stored) objects inside a loop.</p>     <p>As the loop will be executed inside the scope of \"store\", the browser must keep the information about \"store\" with each execution of \"test\", even if called from the timeout.</p>      <h1>Result</h1>     <p>The performance in IE is poor (~1150ms for each loop), compared to the same stuff executed without so much precreated objects (previous example).</p>     <p>It makes no difference if we use a global or a local variable here. It's identical to GlobalObject_2.html.</p>"},
{nr:"3",title:"LocalObject 3",name:"LocalObject_3.html",desc:"<p>JS Object Storage Performance</p>      <h1>Test Description</h1>     <p>Precreate 50.000 objects (locally stored). After this create 10.000 new (not stored) objects inside a loop.</p>      <h1>Result</h1>     <p>The additional cleanup (remove all entries) of the local storage optimizes performance after the first loop. First loop is done after ~1150ms. The following loop needs ~490ms. Not bad, but poorly compared to the version, where the storage have never exist before. (See first examples, which executes in ~350ms.)</p>     <p>It makes no difference if we use a global or a local variable here. It's identical to GlobalObject_3.html.</p>"},
{nr:"4",title:"LocalObject 4",name:"LocalObject_4.html",desc:"<p>JS Object Storage Performance</p>      <h1>Test Description</h1>     <p>Precreate 50.000 objects (locally stored). After this create 10.000 new (not stored) objects inside a loop.</p>     <p>The \"store\" variable will be resetted after the first loop with \"null\".</p>      <h1>Result</h1>     <p>The additional cleanup (overwrite with null) of the global storage optimizes performance after the first loop. First loop is done after ~1150ms. The following loop needs ~350ms. Quite good. The same value as in the first example, where the data have never exist.</p>     <p>Interesting because theoratically the function implemenetation of \"test\" is inside the scope of \"store\".</p>"},
{nr:"5",title:"LocalObject 5",name:"LocalObject_5.html",desc:"<p>JS Object Storage Performance</p>      <h1>Test Description</h1>     <p>Precreate 50.000 objects (locally stored). After this create 10.000 new (not stored) objects inside a loop.</p>     <p>The test method is implemented outside of the scope of \"store\".</p>      <h1>Result</h1>     <p>We need no additional cleanup to get a good performance of the function. First loop is done after ~1150ms. The following loop needs ~350ms. Quite good. The same value as in the first example, where the data have never exist.</p>"},
{nr:"1",title:"NumberCreate 1",name:"NumberCreate_1.html",desc:"<p>Tests for Number creation performance</p>     <ol>       <li>Using simple number</li>       <li>Using parseInt</li>       <li>Using parseFloat</li>       <li>Using new with string int</li>       <li>Using new with string float</li>       <li>Using new with simple number</li>       <li>Using new with parseInt</li>       <li>Using new with parseFloat</li>     </ol>"},
{nr:"1",title:"ObjectCreate 1",name:"ObjectCreate_1.html",desc:"<p>Tests for empty Object creation performance</p>     <ol>       <li>Using \"{}\"</li>       <li>Using \"new Object\"</li>       <li>Using \"new Object()\"</li>     </ol>"},
{nr:"2",title:"ObjectCreate 2",name:"ObjectCreate_2.html",desc:"<p>Tests for filled Object creation performance</p>     <ol>       <li>Using \"{ content }\"</li>       <li>Using \"new Object; obj.key = value\"</li>       <li>Using \"new Object(); obj.key = value\"</li>     </ol>"},
{nr:"1",title:"ObjectLevel 1",name:"ObjectLevel_1.html",desc:"<p>Testing the influence of inheritance to object creation performance.</p>     <p>Result: Each inheritance level increases the negative effect.</p>"},
{nr:"2",title:"ObjectLevel 2",name:"ObjectLevel_2.html",desc:"<p>Testing the influence of inheritance to object creation performance.</p>     <p>Don't execute superclass constructor.</p>     <p>Result: No negative effect!</p>"},
{nr:"3",title:"ObjectLevel 3",name:"ObjectLevel_3.html",desc:"<p>Testing the influence of inheritance to object creation performance.</p>     <p>Result: Each inheritance level increases the negative effect.</p>"},
{nr:"1",title:"ObjectSize 1",name:"ObjectSize_1.html",desc:"<p>Testing the incluence to the performance of data using the prototype mechanism on classes.</p>"},
{nr:"1",title:"Qooxdoo 1",name:"Qooxdoo_1.html",desc:"<p>Tests for qooxdoo object performance</p>     <ol>       <li>qx.core.Object</li>       <li>qx.core.Target</li>       <li>qx.event.type.Event</li>       <li>qx.event.type.MouseEvent</li>       <li>qx.ui.basic.Terminator</li>       <li>qx.ui.layout.CanvasLayout</li>       <li>qx.ui.layout.BoxLayout</li>     </ol>"},
{nr:"1",title:"StringConcat 1",name:"StringConcat_1.html",desc:"<p>Tests for String Performance. Using new String instances for concat.</p>     <ol>       <li>Operator +=</li>       <li>Operators = and +</li>       <li>Concat function</li>       <li>Array Push</li>       <li>Array Index</li>       <li>StringBuilder Object</li>     </ol>"},
{nr:"2",title:"StringConcat 2",name:"StringConcat_2.html",desc:"<p>Tests for String Performance. Using cached string instances for concat.</p>     <ol>       <li>Operator +=</li>       <li>Operators = and +</li>       <li>Concat function</li>       <li>Array Push</li>       <li>Array Index</li>       <li>StringBuilder Object</li>     </ol>"},
{nr:"3",title:"StringConcat 3",name:"StringConcat_3.html",desc:"<p>Tests for String Performance.</p>     <p>Getting an filled array of strings and try to combine them.</p>      <ol>       <li>Operator +=</li>       <li>Operators = and +</li>       <li>Concat function</li>       <li>Array Push</li>       <li>Array Index</li>       <li>Array Append</li>     </ol>"},
{nr:"1",title:"StyleBuilder 1",name:"StyleBuilder_1.html",desc:"<p>Tests different method to apply a bunch of styles.</p>     <ol>       <li>Join styles into a string and apply them together</li>       <li>Apply styles separately</li>     </ol>     <p>Result: In Gecko-1.8.x and IE6/7 method #2 runs with double performance compared to method #1.</p>"},
{nr:"1",title:"TypeCheck 1",name:"TypeCheck_1.html",desc:"<p>Tests for typical value checks and their performance.</p>     <ol>       <li>Typeof with Strings</li>       <li>Typeof with Constants</li>       <li>Instanceof</li>     </ol>"}
]
}]